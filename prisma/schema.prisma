// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER MODELS
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  name              String?
  firstName         String?
  lastName          String?
  phone             String?
  isVerified        Boolean   @default(false)
  role              UserRole  @default(CUSTOMER)
  profileImageUrl   String?
  biography         String?
  gender            Gender?
  dateOfBirth       DateTime?
  preferredLanguage String?   @default("en")
  preferredCurrency String?   @default("USD")
  timezone          String?
  twoFactorEnabled  Boolean   @default(false)
  twoFactorSecret   String?
  lastLoginAt       DateTime?
  lastLoginIp       String?
  deviceIds         String[]  @default([])
  accountStatus     AccountStatus @default(ACTIVE)
  marketingConsent  Boolean   @default(false)
  referralCode      String?   @unique
  referredBy        String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?
  
  // Communication preferences
  notificationPreferences Json? // E.g. {email: true, sms: false, push: true, marketing: false}
  communicationChannels String[] @default(["email"]) // E.g. ["email", "sms", "push", "in_app"]

  // Social connections
  googleId          String?   @unique
  facebookId        String?   @unique
  appleId           String?   @unique

  // Relations
  addresses         Address[]
  paymentMethods    PaymentMethod[]
  orders            Order[]
  reviews           Review[]
  wishlists         WishlistItem[]
  notifications     Notification[]
  carts             Cart[]
  favoriteVendors   FavoriteVendor[]
  authTokens        AuthToken[]
  conversations     Conversation[]
  messages          Message[]
  refunds           Refund[]
  transactions      Transaction[]

  // Relations based on role
  vendor            Vendor?
  admin             Admin?
  
  // Orders placed as a customer with this user
  customerOrders    CustomerOrder[]

  // Analytics
  productViews      ProductView[]
  searchQueries     SearchQuery[]
  userAnalytics     UserAnalytics[]
  
  // Vendor-user communications
  sentMessages      VendorCommunication[] @relation("MessageSender", map: "VendorCommunication_userSender_fkey")
  receivedMessages  VendorCommunication[] @relation("MessageReceiver", map: "VendorCommunication_userReceiver_fkey")
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  DEACTIVATED
  BANNED
}

model AuthToken {
  id          String    @id @default(cuid())
  userId      String
  token       String    @unique
  type        TokenType
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  lastUsedAt  DateTime?
  revokedAt   DateTime?
  userAgent   String?
  ipAddress   String?

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
  INVITE
}

model Address {
  id              String    @id @default(cuid())
  userId          String
  name            String?
  street          String
  apartment       String?
  city            String
  state           String
  postalCode      String
  country         String
  phoneNumber     String?
  isDefault       Boolean   @default(false)
  isShippingDefault Boolean @default(false)
  isBillingDefault Boolean  @default(false)
  label           String?   // e.g., "Home", "Work", etc.
  notes           String?
  latitude        Float?
  longitude       Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders          Order[]   @relation("shippingAddress")
  billingOrders   Order[]   @relation("billingAddress")
}

model PaymentMethod {
  id              String    @id @default(cuid())
  userId          String
  type            PaymentType
  provider        String
  accountNumber   String?   // Last 4 digits for cards
  expiryDate      String?
  isDefault       Boolean   @default(false)
  paymentToken    String?   // Encrypted token from payment provider
  billingAddressId String?
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[]
}

enum PaymentType {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
  BANK_TRANSFER
  CRYPTO
  STORE_CREDIT
  OTHER
}

// VENDOR MODELS
model Vendor {
  id                    String            @id @default(cuid())
  userId                String            @unique
  storeName             String
  slug                  String            @unique
  description           String?
  shortDescription      String?
  logo                  String?
  banner                String?
  coverImage            String?           // Store cover image  
  featuredImages        String[]
  contactEmail          String
  contactPhone          String?
  businessAddress       Json
  taxIdentification     String?           // VAT number, TAX ID, etc
  businessType          BusinessType?
  foundedYear           Int?
  verificationStatus    VerificationStatus @default(PENDING)
  verificationDocuments Json?
  rejectionReason       String?
  isActive              Boolean           @default(true)
  isPopular             Boolean           @default(false)
  isFeatured            Boolean           @default(false)
  avgRating             Float?
  totalRatings          Int               @default(0)
  totalSales            Int               @default(0)
  commissionRate        Float             @default(10) // percentage
  balance               Float             @default(0)
  minOrderAmount        Float?
  maxOrderAmount        Float?
  freeShippingThreshold Float?
  processingTime        String?           // e.g. "1-3 business days"
  
  // Stripe Connect Fields
  stripeAccountId       String?           // Stripe Connect account ID
  stripeAccountStatus   StripeAccountStatus? // Status of the Stripe Connect account
  stripeAccountType     StripeAccountType? // Type of Stripe Connect account (Express, Standard, Custom)
  stripeOnboardingComplete Boolean         @default(false)
  stripePayoutsEnabled  Boolean           @default(false)
  stripeChargesEnabled  Boolean           @default(false)
  stripeDetailsSubmitted Boolean          @default(false)
  stripeMetadata        Json?             // Additional Stripe account metadata
  
  // Payment preferences
  preferredPayoutMethods Json?            // E.g. [{type: "BANK", details: {...}}, {type: "PAYPAL", details: {...}}]
  payoutSchedule         String?          // E.g. "WEEKLY", "BIWEEKLY", "MONTHLY"
  minimumPayoutAmount    Float?           @default(50)
  taxWithholdingRate     Float?           // For tax withholding if applicable
  
  shippingMethods       ShippingMethod[]
  operatingHours        Json?             // Business hours
  socialLinks           Json?             // Facebook, Instagram, Twitter URLs
  policies              Json?             // Return, shipping, etc. policies
  seo                   Json?             // Meta title, description, keywords
  tags                  String[]          // Tags for vendor search
  subscription          SubscriptionTier  @default(BASIC)
  subscriptionExpiresAt DateTime?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  products              Product[]
  orders                OrderItem[]
  withdrawals           Withdrawal[]
  followers             FavoriteVendor[]
  promotions            Promotion[]
  conversations         Conversation[]
  analytics             VendorAnalytics[]
  
  // Vendor communications with users
  sentMessages          VendorCommunication[] @relation("VendorSender", map: "VendorCommunication_vendorSender_fkey")
  receivedMessages      VendorCommunication[] @relation("VendorReceiver", map: "VendorCommunication_vendorReceiver_fkey")
}

enum BusinessType {
  INDIVIDUAL
  PARTNERSHIP
  CORPORATION
  LLC
  NON_PROFIT
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum SubscriptionTier {
  BASIC
  PREMIUM
  PROFESSIONAL
  ENTERPRISE
}

model ShippingMethod {
  id            String    @id @default(cuid())
  vendorId      String
  name          String
  description   String?
  basePrice     Float
  pricePerKg    Float?
  minWeight     Float?
  maxWeight     Float?
  estimatedDays String    // e.g. "3-5 days"
  isActive      Boolean   @default(true)
  supportedRegions String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  vendor        Vendor    @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model FavoriteVendor {
  id        String    @id @default(cuid())
  userId    String
  vendorId  String
  createdAt DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vendor    Vendor    @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([userId, vendorId])
}

model Withdrawal {
  id              String        @id @default(cuid())
  vendorId        String
  amount          Float
  status          PaymentStatus @default(PENDING)
  paymentMethod   String
  accountDetails  Json
  reference       String?
  notes           String?
  processedAt     DateTime?
  processedBy     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  vendor          Vendor        @relation(fields: [vendorId], references: [id])
}

model VendorAnalytics {
  id              String    @id @default(cuid())
  vendorId        String
  date            DateTime
  totalRevenue    Float
  totalOrders     Int
  newCustomers    Int
  returningCustomers Int
  avgOrderValue   Float
  conversionRate  Float?
  topProducts     Json?
  trafficSources  Json?
  deviceStats     Json?
  
  vendor          Vendor    @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([vendorId, date])
}

// USER ANALYTICS MODEL
model UserAnalytics {
  id                String    @id @default(cuid())
  userId            String
  date              DateTime
  
  // Session data
  sessionsCount     Int       @default(0)
  totalSessionTime  Int       @default(0) // In seconds
  avgSessionTime    Float?
  bounceRate        Float?
  
  // Activity metrics
  loginCount        Int       @default(0)
  cartAbandonment   Boolean?
  searchCount       Int       @default(0)
  productViewCount  Int       @default(0)
  
  // Engagement metrics
  clicksCount       Int       @default(0)
  pageViews         Int       @default(0)
  favoriteActions   Int       @default(0)
  reviewsSubmitted  Int       @default(0)
  
  // Purchase behavior
  ordersPlaced      Int       @default(0)
  totalSpent        Float     @default(0)
  avgOrderValue     Float?
  
  // Devices and platforms
  devices           Json?     // E.g. {"mobile": 60, "desktop": 30, "tablet": 10}
  browsers          Json?
  operatingSystems  Json?
  
  // Marketing data
  campaignResponses Json?
  utmSources        Json?
  
  // Demographics & behaviors
  interests         String[]
  categoryPreferences Json?
  priceRangeBehavior Json?
  
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

// VENDOR-USER COMMUNICATION MODEL
model VendorCommunication {
  id                String              @id @default(cuid())
  
  // Sender/receiver identifiers
  senderId          String              // Can be either vendor or user ID
  senderType        CommunicatorType
  receiverId        String              // Can be either vendor or user ID
  receiverType      CommunicatorType
  
  // Content
  subject           String?
  body              String
  attachments       String[]            // File URLs
  metadata          Json?               // Additional data like product IDs, order IDs
  
  // Status tracking
  status            CommunicationStatus @default(SENT)
  isRead            Boolean             @default(false)
  readAt            DateTime?
  
  // Classification
  type              CommunicationType   // Purpose of communication
  priority          Priority            @default(NORMAL)
  tags              String[]
  
  // References
  relatedOrderId    String?
  relatedProductId  String?
  parentMessageId   String?             // For threaded conversations
  
  // Timestamps
  sentAt            DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  expiresAt         DateTime?
  
  // Relations for user sender/receiver
  userSender        User?               @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade, map: "user_sender_fkey")
  userReceiver      User?               @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade, map: "user_receiver_fkey")
  
  // Relations for vendor sender/receiver
  vendorSender      Vendor?             @relation("VendorSender", fields: [senderId], references: [id], onDelete: Cascade, map: "vendor_sender_fkey")
  vendorReceiver    Vendor?             @relation("VendorReceiver", fields: [receiverId], references: [id], onDelete: Cascade, map: "vendor_receiver_fkey")
}

enum CommunicatorType {
  USER
  VENDOR
  ADMIN
  SYSTEM
}

enum CommunicationStatus {
  DRAFT
  SENT
  DELIVERED
  FAILED
  REPLIED
  ARCHIVED
}

enum CommunicationType {
  INQUIRY
  ORDER_UPDATE
  SHIPPING_UPDATE
  PAYMENT_ISSUE
  PRODUCT_QUESTION
  RETURN_REQUEST
  FEEDBACK
  DISPUTE
  PROMOTIONAL
  SYSTEM_NOTIFICATION
  OTHER
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// ADMIN MODELS
model Admin {
  id              String    @id @default(cuid())
  userId          String    @unique
  permissions     String[]
  department      String?
  isSuper         Boolean   @default(false)
  lastActionAt    DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// PRODUCT MODELS
model Product {
  id                String    @id @default(cuid())
  vendorId          String
  name              String
  slug              String    @unique
  description       String?
  shortDescription  String?
  price             Float
  comparePrice      Float?
  costPrice         Float?
  wholesalePrice    Float?
  wholesaleMinQty   Int?
  sku               String?   @unique
  barcode           String?   @unique
  inventory         Int       @default(0)
  lowStockThreshold Int?      @default(5)
  weight            Float?
  dimensions        Json?     // { length, width, height }
  isPublished       Boolean   @default(false)
  isDigital         Boolean   @default(false)
  digitalFileUrl    String?
  hasVariants       Boolean   @default(false)
  isFeatured        Boolean   @default(false)
  isOnSale          Boolean   @default(false)
  saleStartDate     DateTime?
  saleEndDate       DateTime?
  metaTitle         String?
  metaDescription   String?
  metaKeywords      String[]
  shippingClass     String?
  tagsAndKeywords   String[]
  condition         ProductCondition @default(NEW)
  warrantyInfo      String?
  returnPolicy      String?
  attributes        Json?     // Custom product attributes
  viewCount         Int       @default(0)
  avgRating         Float?
  totalRatings      Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  vendor            Vendor    @relation(fields: [vendorId], references: [id])
  images            ProductImage[]
  categories        CategoriesOnProducts[]
  variants          ProductVariant[]
  orderItems        OrderItem[]
  reviews           Review[]
  wishlists         WishlistItem[]
  cartItems         CartItem[]
  specifications    ProductSpecification[]
  relatedProducts   RelatedProduct[]
  relatedOf         RelatedProduct[] @relation("relatedTo")
  inventoryHistory  InventoryHistory[]
  promotions        PromotionsOnProducts[]
  views             ProductView[]
}

enum ProductCondition {
  NEW
  USED
  REFURBISHED
  COLLECTIBLE
}

model ProductImage {
  id          String    @id @default(cuid())
  productId   String
  url         String
  thumbnailUrl String?
  altText     String?
  isMain      Boolean   @default(false)
  position    Int       @default(0)
  width       Int?
  height      Int?
  size        Int?      // File size in bytes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductSpecification {
  id          String    @id @default(cuid())
  productId   String
  name        String
  value       String
  unit        String?
  group       String?
  position    Int       @default(0)
  isTechnical Boolean   @default(false)
  isFilterable Boolean  @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model RelatedProduct {
  id              String    @id @default(cuid())
  productId       String
  relatedProductId String
  relationType    RelationType
  position        Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  relatedProduct  Product   @relation("relatedTo", fields: [relatedProductId], references: [id], onDelete: Cascade)

  @@unique([productId, relatedProductId])
}

enum RelationType {
  SIMILAR
  ACCESSORY
  UPSELL
  CROSS_SELL
}

model ProductVariant {
  id          String    @id @default(cuid())
  productId   String
  name        String?
  options     Json[]    // Array of option values e.g. ["Red", "Large"]
  price       Float?
  comparePrice Float?
  inventory   Int       @default(0)
  sku         String?   @unique
  barcode     String?   @unique
  weight      Float?
  dimensions  Json?
  imageUrls   String[]
  isDefault   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model InventoryHistory {
  id          String            @id @default(cuid())
  productId   String
  variantId   String?
  quantity    Int
  type        InventoryAdjustmentType
  reason      String?
  orderId     String?
  reference   String?
  createdBy   String?
  createdAt   DateTime          @default(now())

  product     Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum InventoryAdjustmentType {
  PURCHASE
  SALE
  RETURN
  DAMAGE
  ADJUSTMENT
  TRANSFER
  EXPIRED
}

model Category {
  id              String    @id @default(cuid())
  name            String
  slug            String    @unique
  description     String?
  shortDescription String?
  imageUrl        String?
  icon            String?
  color           String?
  parentId        String?
  isActive        Boolean   @default(true)
  isFeatured      Boolean   @default(false)
  position        Int       @default(0)
  metaTitle       String?
  metaDescription String?
  metaKeywords    String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  parent          Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        Category[] @relation("CategoryHierarchy")
  products        CategoriesOnProducts[]
}

model CategoriesOnProducts {
  productId       String
  categoryId      String
  isPrimary       Boolean   @default(false)
  assignedAt      DateTime  @default(now())

  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  category        Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
}

// CART MODELS
model Cart {
  id              String    @id @default(cuid())
  userId          String?
  sessionId       String?   @unique
  subtotal        Float     @default(0)
  discount        Float     @default(0)
  tax             Float     @default(0)
  shipping        Float     @default(0)
  total           Float     @default(0)
  couponId        String?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  expiresAt       DateTime?

  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  items           CartItem[]
  coupon          Coupon?   @relation(fields: [couponId], references: [id])
}

model CartItem {
  id              String    @id @default(cuid())
  cartId          String
  productId       String
  variantId       String?
  quantity        Int
  price           Float
  totalPrice      Float
  options         Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  cart            Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant         ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
}

// ORDER MODELS
model Order {
  id                String        @id @default(cuid())
  userId            String
  orderNumber       String        @unique
  status            OrderStatus   @default(PENDING)
  totalAmount       Float
  subtotalAmount    Float
  metadata          String
  shippingAmount    Float
  taxAmount         Float
  discountAmount    Float         @default(0)
  paymentMethod     String
  paymentStatus     PaymentStatus @default(PENDING)
  couponId          String?
  shippingAddressId String
  billingAddressId  String?
  notes             String?
  giftMessage       String?
  estimatedDelivery DateTime?
  trackingNumbers   String[]
  totalWeight       Float?
  customerOrders    CustomerOrder[]
  refunds           Refund[]
  transactions      Transaction[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  user              User          @relation(fields: [userId], references: [id])
  items             OrderItem[]
  shippingAddress   Address       @relation("shippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress    Address?      @relation("billingAddress", fields: [billingAddressId], references: [id])
  coupon            Coupon?       @relation(fields: [couponId], references: [id])
}

// For splitting orders by vendor
model CustomerOrder {
  id              String        @id @default(cuid())
  orderId         String        // Main order ID
  userId          String        // Customer
  vendorId        String        // Vendor assigned to this part
  status          OrderStatus   @default(PENDING)
  subtotal        Float
  shipping        Float
  tax             Float
  discount        Float         @default(0)
  total           Float
  trackingNumber  String?
  carrierName     String?
  shippingMethod  String?
  estimatedDelivery DateTime?

  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id])
}

model OrderItem {
  id              String        @id @default(cuid())
  orderId         String
  productId       String
  variantId       String?
  vendorId        String
  name            String
  sku             String?
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  taxAmount       Float?
  discount        Float?
  status          OrderStatus   @default(PENDING)
  variantInfo     Json?         // Saved variant info
  isCancelled     Boolean       @default(false)
  isReviewed      Boolean       @default(false)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product       @relation(fields: [productId], references: [id])
  variant         ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
  vendor          Vendor        @relation(fields: [vendorId], references: [id])
}

enum OrderStatus {
  PENDING
  PROCESSING
  PACKED
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
  REFUNDED
  ON_HOLD
  BACKORDERED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  RETURNED
  RESTOCKED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  PAID
  PARTIALLY_PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  VOIDED
  DISPUTED
}

model Transaction {
  id              String            @id @default(cuid())
  orderId         String?
  userId          String?
  paymentMethodId String?
  amount          Float
  currency        String            @default("USD")
  status          TransactionStatus
  type            TransactionType
  provider        String
  providerTransactionId String?
  providerResponse Json?
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  order           Order?            @relation(fields: [orderId], references: [id])
  user            User?             @relation(fields: [userId], references: [id])
  paymentMethod   PaymentMethod?    @relation(fields: [paymentMethodId], references: [id])
}

enum TransactionStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum TransactionType {
  CHARGE
  REFUND
  WITHDRAWAL
  TRANSFER
  ADJUSTMENT
}

model Refund {
  id              String        @id @default(cuid())
  orderId         String
  userId          String
  amount          Float
  reason          String
  status          RefundStatus  @default(PENDING)
  refundMethod    String
  refundReference String?
  notes           String?
  requestedAt     DateTime      @default(now())
  processedAt     DateTime?
  processedBy     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  order           Order         @relation(fields: [orderId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
  CANCELLED
}

// MARKETING MODELS
model Coupon {
  id                String      @id @default(cuid())
  code              String      @unique
  description       String?
  type              DiscountType
  value             Float       // Percentage or fixed amount
  minOrderAmount    Float?
  maxDiscount       Float?
  usageLimit        Int?        // Total number of times coupon can be used
  userUsageLimit    Int?        // Number of times a user can use this coupon
  startDate         DateTime?
  endDate           DateTime?
  isActive          Boolean     @default(true)
  appliesTo         AppliesTo   @default(ALL)
  specificProducts  String[]    // Product IDs if appliesTo is SPECIFIC_PRODUCTS
  specificCategories String[]   // Category IDs if appliesTo is SPECIFIC_CATEGORIES
  specificVendors   String[]    // Vendor IDs if appliesTo is SPECIFIC_VENDORS
  usageCount        Int         @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  orders            Order[]
  carts             Cart[]
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
  BUY_X_GET_Y
}

enum AppliesTo {
  ALL
  SPECIFIC_PRODUCTS
  SPECIFIC_CATEGORIES
  SPECIFIC_VENDORS
}

model Promotion {
  id              String          @id @default(cuid())
  vendorId        String?         // If null, it's a platform-wide promotion
  name            String
  description     String?
  type            PromotionType
  value           Float
  minOrderAmount  Float?
  maxDiscount     Float?
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean         @default(true)
  bannerImage     String?
  bannerUrl       String?
  position        Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  vendor          Vendor?         @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  products        PromotionsOnProducts[]
}

enum PromotionType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
  BUY_X_GET_Y
  FLASH_SALE
  BUNDLE
  GIFT_WITH_PURCHASE
}

model PromotionsOnProducts {
  promotionId     String
  productId       String
  assignedAt      DateTime        @default(now())

  promotion       Promotion       @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([promotionId, productId])
}

// REVIEW MODELS
model Review {
  id              String    @id @default(cuid())
  userId          String
  productId       String
  orderId         String?
  rating          Int
  title           String?
  comment         String?
  pros            String[]
  cons            String[]
  images          String[]
  isVerified      Boolean   @default(false)
  isRecommended   Boolean?
  helpfulCount    Int       @default(0)
  reportCount     Int       @default(0)
  vendorResponse  String?
  status          ReviewStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id])
  product         Product   @relation(fields: [productId], references: [id])
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
}

// WISHLIST MODEL
model WishlistItem {
  id              String    @id @default(cuid())
  userId          String
  productId       String
  addedAt         DateTime  @default(now())
  movedToCartAt   DateTime?
  notes           String?

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

// NOTIFICATION MODELS
model Notification {
  id              String            @id @default(cuid())
  userId          String
  type            NotificationType
  title           String
  message         String
  link            String?
  isRead          Boolean           @default(false)
  data            Json?
  createdAt       DateTime          @default(now())
  readAt          DateTime?
  expiresAt       DateTime?

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  ORDER_STATUS
  SHIPMENT
  PRICE_DROP
  BACK_IN_STOCK
  PROMOTION
  REVIEW_RESPONSE
  ACCOUNT
  VENDOR_UPDATE
  SYSTEM
  PAYMENT
  REFUND
}

// MESSAGING MODELS
model Conversation {
  id              String            @id @default(cuid())
  userId          String            // Customer
  vendorId        String?           // Vendor (null for customer-support)
  supportAgentId  String?           // Support agent ID (if applicable)
  subject         String?
  status          ConversationStatus @default(OPEN)
  isArchived      Boolean           @default(false)
  lastMessageAt   DateTime          @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  user            User              @relation(fields: [userId], references: [id])
  vendor          Vendor?           @relation(fields: [vendorId], references: [id])
  messages        Message[]
}

enum ConversationStatus {
  OPEN
  RESOLVED
  WAITING_CUSTOMER
  WAITING_VENDOR
  WAITING_SUPPORT
}

model Message {
  id              String            @id @default(cuid())
  conversationId  String
  userId          String            // Sender
  content         String
  attachments     String[]
  isRead          Boolean           @default(false)
  createdAt       DateTime          @default(now())

  conversation    Conversation      @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id])
}

// ANALYTICS MODELS
model ProductView {
  id              String    @id @default(cuid())
  productId       String
  userId          String?
  sessionId       String?
  source          String?
  referrer        String?
  device          String?
  browser         String?
  country         String?
  region          String?
  city            String?
  createdAt       DateTime  @default(now())

  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model SearchQuery {
  id              String    @id @default(cuid())
  userId          String?
  sessionId       String?
  query           String
  resultsCount    Int
  clickedProductId String?
  device          String?
  browser         String?
  createdAt       DateTime  @default(now())

  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// MICROSERVICES SUPPORT MODELS
model ServiceRegistry {
  id              String    @id @default(cuid())
  name            String    @unique
  version         String
  url             String
  healthEndpoint  String?
  description     String?
  isActive        Boolean   @default(true)
  lastHeartbeat   DateTime?
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model EventLog {
  id              String    @id @default(cuid())
  eventType       String
  source          String
  payload         Json
  status          String
  processedAt     DateTime?
  error           String?
  retryCount      Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Add enum for Stripe account status
enum StripeAccountStatus {
  PENDING
  ACTIVE
  RESTRICTED
  REJECTED
  DISABLED
}

// Add enum for Stripe account type
enum StripeAccountType {
  EXPRESS
  STANDARD
  CUSTOM
}
